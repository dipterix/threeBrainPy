{"version":3,"file":"src_lib_index_js.cf558426497cd1d939c7.js","mappings":";;;;;;;;;;;;;;;;;AAAA;;AAE6C;AAC7C,gBAAgB,kDAAmB;AACwB;;AAE3D;AACoD;;;;;;;;;;;;;;;;;;;ACPkB;AAItB;;;AAGhD,gDAAgD,gFAAY;AAC5D;AACA,eAAe,8EAAU;;AAEzB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEO,+BAA+B,iEAAc;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO,8BAA8B,gEAAa;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,iFAAa;AACvC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,gCAAgC,4BAA4B;AAC5D,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA","sources":["webpack://threebrainpy/./src/lib/index.js","webpack://threebrainpy/./src/lib/widget.js"],"sourcesContent":["// Export widget models and views, and the npm package version number.\n\nimport packageInfo from '../../package.json';\nconst version = packageInfo.version;\nimport {BrainWidgetView, BrainWidgetModel} from './widget';\n\nconsole.log(version);\nexport {BrainWidgetView, BrainWidgetModel, version};\n","import { DOMWidgetModel, DOMWidgetView } from '@jupyter-widgets/base';\nimport {\n  ViewerApp, ViewerWrapper, StorageCache, Readers, \n  Constants, Drivers, ExternLibs\n} from '@rave-ieeg/three-brain/src/js/index.js';\n\n\nconst global_cache = window.global_cache || new StorageCache();\nwindow.global_cache = global_cache;\nwindow.THREE = ExternLibs.THREE;\n\n// See example.py for the kernel counterpart to this file.\n\n// Custom Model. Custom widgets models must at least provide default values\n// for model attributes, including\n//\n//  - `_view_name`\n//  - `_view_module`\n//  - `_view_module_version`\n//\n//  - `_model_name`\n//  - `_model_module`\n//  - `_model_module_version`\n//\n//  when different from the base class.\n\n// When serialiazing the entire widget state for embedding, only values that\n// differ from the defaults will be serialized.\n\nexport class BrainWidgetModel extends DOMWidgetModel {\n  defaults() {\n    return {\n      ...super.defaults(),\n      _model_name : 'BrainWidgetModel',\n      _view_name : 'BrainWidgetView',\n      _model_module : 'threebrainpy',\n      _view_module : 'threebrainpy',\n      _model_module_version : '0.1.0',\n      _view_module_version : '0.1.0',\n      config : null\n    };\n  }\n}\n\nexport class BrainWidgetView extends DOMWidgetView {\n\n  render() {\n    window.www = this;\n    this.value_changed();\n    // Observe and act on future changes to the value attribute\n    this.model.on('change:config', this.value_changed, this);\n    window.addEventListener('resize', this.resize.bind(this));\n  }\n\n  value_changed() {\n    if( !this.model ) return;\n    let data = this.model.get('config');\n    if (typeof data !== 'string' || data.trim() === \"\" ) return;\n    data = JSON.parse(data); \n    if (!data ) return;\n\n    try {\n      let width = data.width ?? 1024;\n      if ( width <= 1.1 ) {\n        // relative width\n        width = window.innerWidth * width;\n        if (width < 1024) {\n          width = 1024;\n        }\n      }\n\n      let height = data.height ?? 500;\n      if ( height <= 1.1 ) {\n        // relative width\n        height = window.innerHeight * height;\n        if (height < 400) {\n          height = 400;\n        }\n      }\n  \n      if (!this.widget) {\n        this.widget = new ViewerWrapper({\n          $container : this.el, cache : global_cache,\n          width : width, height : height,\n          // do not automatically scale the brain to fit the screen\n          viewerMode : false\n        });\n      }\n      this.widget.receiveData({ data : data, reset : false });\n    } catch (error) {\n      console.log('error', error);\n    }\n    // widget.viewer.shinyDriver = new threeBrain.Drivers.Shiny( widget.viewer );\n  }\n\n  resize() {\n    if (this.widget) {\n      let width = this.el.clientWidth;\n      let height = this.el.clientHeight;\n      // Do not resize immediately, wait for the browser to finish resizing\n      setTimeout(() => {\n        let newWidth = this.el.clientWidth;\n        let newHeight = this.el.clientHeight;\n        if( newWidth == width && newHeight == height ) {\n          if( width < 768 ) width = 768;\n          if( height < 300 ) height = 300;\n          this.widget.resize(width, height);\n        }\n      }, 100);\n    }\n  }\n}\n"],"names":[],"sourceRoot":""}